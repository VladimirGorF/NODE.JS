// –î–æ–º–∞—à–Ω–µ–µ –∑–∞–¥–∞–Ω–∏–µ
// –ù–∞–ø–∏—à–∏—Ç–µ HTTP —Å–µ—Ä–≤–µ—Ä –Ω–∞ express –∏ —Ä–µ–∞–ª–∏–∑—É–∏ÃÜ—Ç–µ –¥–≤–∞ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∞ ‚Äú/‚Äù –∏ ‚Äú/about‚Äù, –≥–¥–µ:
// - –ù–∞ –∫–∞–∂–¥–æ–∏ÃÜ —Å—Ç—Ä–∞–Ω–∏—Ü–µ —Ä–µ–∞–ª–∏–∑–æ–≤–∞–Ω —Å—á–µ—Ç—á–∏–∫ –ø—Ä–æ—Å–º–æ—Ç—Ä–æ–≤
// - –ó–Ω–∞—á–µ–Ω–∏–µ —Å—á–µ—Ç—á–∏–∫–∞ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ —Å–æ—Ö—Ä–∞–Ω—è—Ç—å –≤ —Ñ–∞–∏ÃÜ–ª –∫–∞–∂–¥—ã–∏ÃÜ —Ä–∞–∑, –∫–æ–≥–¥–∞ –æ–±–Ω–æ–≤–ª—è–µ—Ç—Å—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞
// - –¢–∞–∫–∂–µ –∑–Ω–∞—á–µ–Ω–∏–µ —Å—á–µ—Ç—á–∏–∫–∞ –¥–æ–ª–∂–Ω–æ –∑–∞–≥—Ä—É–∂–∞—Ç—å—Å—è –∏–∑ —Ñ–∞–∏ÃÜ–ª–∞, –∫–æ–≥–¥–∞ –∑–∞–ø—É—Å–∫–∞–µ—Ç—Å—è –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ —Å—Ç—Ä–∞–Ω–∏—Ü—ã
// - –¢–∞–∫–∏–º –æ–±—Ä–∞–∑–æ–º —Å—á–µ—Ç—á–∏–∫ –Ω–µ –¥–æ–ª–∂–µ–Ω –æ–±–Ω—É–ª—è—Ç—å—Å—è –∫–∞–∂–¥—ã–∏ÃÜ —Ä–∞–∑, –∫–æ–≥–¥–∞ –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫–∞–µ—Ç—Å—è —Å–µ—Ä–≤–µ—Ä
// üí° –ü–æ–¥—Å–∫–∞–∑–∫–∞:
// –í—ã –º–æ–∂–µ—Ç–µ —Å–æ—Ö—Ä–∞–Ω—è—Ç—å —Ñ–∞–∏ÃÜ–ª –≤ —Ñ–æ—Ä–º–∞—Ç–µ JOSN, –≥–¥–µ –≤ –æ–±—ä–µ–∫—Ç–µ –∫–ª—é—á–æ–º –±—É–¥–µ—Ç —è–≤–ª—è—Ç—å—Å—è URL —Å—Ç—Ä–∞–Ω–∏—Ü—ã, –∞ –∑–Ω–∞—á–µ–Ω–∏–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø—Ä–æ—Å–º–æ—Ç—Ä–æ–≤ —Å—Ç—Ä–∞–Ω–∏—Ü—ã
const ex = require("express");
const app = ex();
const fs = require("fs");
const path = require("path");
const pathToFile = path.join(__dirname, "data.json");

app.get("/", (req, res) => {
  // —Å—á–∏—Ç—ã–≤–µ–º —Ö—Ä–∞–Ω–∏–ª–∏—â–µ data
  fs.readFile(pathToFile, "utf-8", (error, data) => {
    if (error) {
      console.log(error);
    } else {
      const newData = JSON.parse(data); // –ø—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –¥–∂–µ–π—Å–æ–Ω –≤ –æ–±—ä–µ–∫—Ç
      newData["/"] += 1; // –ø–æ–º–µ–Ω—è–ª–∏ –∑–Ω–∞—á–µ–Ω–∏–µ

      // –æ—Ç–æ–±—Ä–∞–∂–∞–µ–º –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü–µ
      res.send(
        `<h1>–ì–ª–∞–≤–Ω–∞—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞</h1>  <h2>–í—ã –ø–æ—Å–µ—Ç–∏–ª–∏ –≥–ª–∞–≤–Ω—É—é —Å—Ç—Ä–∞–Ω–∏—Ü—É: ${newData["/"]} —Ä–∞–∑</h2> <a href="/about" >Link to About</a> <br> 
        <a href="/reset" >–û–±–Ω—É–ª–∏—Ç—å —Å—á–µ—Ç—á–∏–∫</a>`
      );
      // –∑–∞–ø–∏—Å—ã–≤–∞–µ–º —Ñ–∞–π–ª —Å –∏–∑–º–µ–Ω–µ–Ω–Ω—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏
      fs.writeFile(pathToFile, JSON.stringify(newData, null, 2), (error) => {
        if (error) {
          console.log(error);
        } else {
          console.log("File was writed");
        }
      });
    }
  });
});

app.get("/about", (req, res) => {
  // —Å—á–∏—Ç—ã–≤–µ–º —Ö—Ä–∞–Ω–∏–ª–∏—â–µ data
  fs.readFile(pathToFile, "utf-8", (error, data) => {
    if (error) {
      console.log(error);
    } else {
      const newData = JSON.parse(data); // –ø—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –¥–∂–µ–π—Å–æ–Ω –≤ –æ–±—ä–µ–∫—Ç
      newData["/about"] += 1; // –ø—Ä–∏–±–∞–≤–∏–ª–∏ —Å—á–µ—Ç—á–∏–∫ –ø–æ –∫–ª—é—á—É /about

      // –æ—Ç–æ–±—Ä–∞–∂–∞–µ–º –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü–µ
      res.send(
        `<h1>This is About</h1>  <h2>–í—ã –ø–æ—Å–µ—Ç–∏–ª–∏ —Å—Ç—Ä–∞–Ω–∏—Ü—É about: ${newData["/about"]} —Ä–∞–∑</h2> <a href="/" >Link to Main</a>`
      );
      // –∑–∞–ø–∏—Å—ã–≤–∞–µ–º —Ñ–∞–π–ª —Å –Ω–æ–≤—ã–º –æ–±—ä–µ–∫—Ç–æ–º —á—Ç–æ–±—ã –ø–æ—Ç–æ–º —Å–Ω–æ–≤–∞ –≤–∑—è—Ç—å –¥–∞–Ω–Ω—ã–µ
      fs.writeFile(pathToFile, JSON.stringify(newData, null, 2), (error) => {
        if (error) {
          console.log(error);
        } else {
          console.log("File was writed");
        }
      });
    }
  });
});

// —Å–±—Ä–æ—Å —Å—á–µ—Ç—á–∏–∫–∞
app.get("/reset", (req, res) => {
  // –æ—Ç–æ–±—Ä–∞–∂–∞–µ–º –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü–µ
  res.send(
    `<h1>This is Reset Page</h1>  <h2>–î–∞–Ω–Ω—ã–µ —Å—á–µ—Ç—á–∏–∫–∞ –û–±–Ω—É–ª–µ–Ω—ã!</h2> <a href="/" >Link to Main</a>`
  );
  // –∑–∞–ø–∏—Å—ã–≤–∞–µ–º —Ñ–∞–π–ª —Å –Ω–æ–≤—ã–º –æ–±—ä–µ–∫—Ç–æ–º —á—Ç–æ–±—ã –ø–æ—Ç–æ–º —Å–Ω–æ–≤–∞ –≤–∑—è—Ç—å –¥–∞–Ω–Ω—ã–µ
  const newData = {
    "/": 0,
    "/about": 0,
  };
  fs.writeFile(pathToFile, JSON.stringify(newData, null, 2), (error) => {
    if (error) {
      console.log(error);
    } else {
      console.log("File was cleaned");
    }
  });
});

app.listen(3000);
